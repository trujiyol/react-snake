{"version":3,"sources":["logo.svg","components/gridsquare.js","components/messagebox.js","components/snakesegment.js","components/snake.js","components/gamelogic.js","components/scorecounter.js","components/token.js","components/swipegrid.js","components/pausebutton.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GridSquare","this","props","index","className","React","Component","MessageBox","message","visible","gamelogic","gameState","STATE","PAUSED","GAMEOVER","INITIAL","renderMessageBox","SnakeSegment","placementStyle","position","height","size","width","top","y","left","x","zIndex","zindex","style","Snake","snakeSegments","segmentIndex","snake","positions","forEach","_rows","_cols","push","key","generateSnakeSegments","GameLogic","_gamespeed","PLAYING","direction","right","up","down","none","grid","token","initialiseGame","startGame","bind","onKeyPressed","updateGame","document","addEventListener","startSwipe","detectSwipe","moveUp","moveDown","moveLeft","moveRight","CustomEvent","i","row","j","randX","Math","floor","random","randY","onUpdate","newsnakeHead","oldsnakeTail","pop","unshift","updateSnake","evaluateGrid","updateGrid","snakeHead","score","placeToken","gameOver","initialiseGrid","initialisesnake","pauseGame","clearInterval","timer","setInterval","e","keyCode","toggleGame","ScoreCounter","_previousScore","_counter","Token","SwipeGrid","currentFingerPosition","lastFingerPosition","isFingerDown","onTap","console","log","event","Event","dispatchEvent","clientX","clientY","difX","window","screen","difY","onMouseDown","onMouseMove","onClick","PauseButton","onclick","Game","state","rows","cols","updateReactState","setState","gridSquares","length","gameSize","gridSize","id","src","Logo","renderGrid","App","date","Date","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09a5b6d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\nimport '../css/gridsquare.css'\n\n\n\nexport default class GridSquare extends React.Component{\n    render(){\n        if(this.props.index % 2 == 0)\n            return(<div className=\"gridsquare colorA\"></div>);\n        else\n            return(<div className=\"gridsquare colorB\"></div>);\n    }\n    \n}\n","import React from \"react\"\nimport '../css/messagebox.css'\n\nexport default class MessageBox\n extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.message = '';\n        this.visible = true;\n      }\n\n      componentDidMount() {\n\n      }\n    \n      componentWillUnmount() {\n\n      }\n\n      renderMessageBox(){\n        switch(this.props.gamelogic.gameState){\n            case this.props.gamelogic.STATE.PAUSED:\n                this.message = \"Game Paused\";\n                this.visible = true;\n                break;\n            case this.props.gamelogic.STATE.GAMEOVER:\n                this.message = \"Game Over\";\n                this.visible = true;\n                break;\n            case this.props.gamelogic.STATE.INITIAL:\n                this.message = \"Press Enter to Play\";\n                this.visible = true;\n                break;\n            default:\n                this.message = null;\n                this.visible = false;\n                break;\n        } \n    }\n\n    render(){\n\n        this.renderMessageBox();\n\n        if(this.visible)\n            return(\n                <div className=\"container seen\">\n                    <div className=\"messagebox\">\n                        {this.message}\n                    </div>\n                </div>)\n        else{\n\n\n            return(\n                <div className=\"container  hidden\">\n                    <div className=\"messagebox\">\n                        {this.message}\n                    </div>\n                </div>)\n                }\n    }\n}\n","\nimport React from \"react\"\nimport \"../css/snake.css\"\n\nexport default class SnakeSegment extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n\n    render(){\n\n        var placementStyle ={\n            position: 'absolute',\n            height: this.props.size,\n            width: this.props.size,\n            top: this.props.y,\n            left: this.props.x,\n            zIndex: this.props.zindex\n        }\n\n        return(<div className=\"snakesegment\" style={placementStyle}></div>);\n    }\n}","import React from \"react\"\nimport SnakeSegment from \"./snakesegment\";\nimport '../css/snake.css'\n\n\n\nexport default class Snake extends React.Component{\n\n    generateSnakeSegments(){\n        var snakeSegments = [];\n        var segmentIndex = 0;\n        this.props.gamelogic.snake.positions.forEach(position => {\n            segmentIndex++;\n            var y = (position[0] / this.props.gamelogic._rows * 100) + \"%\";\n            var x = (position[1] / this.props.gamelogic._cols *100) + \"%\";\n            var size = (1/this.props.gamelogic._rows * 100) + \"%\";\n            var zindex = position[0];\n\n            snakeSegments.push( (<SnakeSegment key={segmentIndex} x={x} y={y} size={size} zindex={zindex}/>))\n        });\n        return snakeSegments;\n    }\n\n    render(){ \n        return(\n            <div className=\"snakecontainer\">\n               {this.generateSnakeSegments()}\n            </div>\n        )\n    }\n    \n}\n","\nexport default class GameLogic{\n    _gamespeed = 200;\n\n    STATE = {\n        INITIAL: 0,\n        PAUSED : 1,\n        GAMEOVER : 2,\n        PLAYING : 3\n    };\n\n    direction = {\n        left: [0,-1],\n        right: [0,1],\n        up:[-1,0],\n        down:[1,0],\n        none: [0,0]\n    }\n\n    grid = [];\n    snake =  {\n        positions: [],\n        direction: this.direction.right\n    };\n    token = [];\n    _rows;\n    _cols;\n    score;\n    \n    onUpdate;\n\n    \n\n\n    constructor(_rows,_cols) {\n\n        this._rows = _rows;\n        this._cols = _cols;\n        this.gameState = this.STATE.INITIAL;\n\n        this.initialiseGame();\n        this.startGame = this.startGame.bind(this);\n        this.onKeyPressed = this.onKeyPressed.bind(this);\n        this.updateGame = this.updateGame.bind(this);\n\n        \n        \n        document.addEventListener(\"keydown\", this.onKeyPressed, false);\n        document.addEventListener(\"mousedown\",this.startSwipe, false);\n        document.addEventListener(\"mousemove\",this.detectSwipe, false);\n\n        this.moveUp = this.moveUp.bind(this);\n        this.moveDown = this.moveDown.bind(this);\n        this.moveLeft = this.moveLeft.bind(this);\n        this.moveRight = this.moveRight.bind(this);\n\n        document.addEventListener(\"swipeLeft\",this.moveLeft);\n        document.addEventListener(\"swipeRight\",this.moveRight);\n        document.addEventListener(\"swipeDown\",this.moveDown);\n        document.addEventListener(\"swipeUp\",this.moveUp);\n        document.addEventListener(\"tapGrid\",this.startGame);\n\n        var event = new CustomEvent('madeBlue');\n      }\n\n    \n    initialiseGrid(){\n        this.grid = [];\n    \n        for(var i = 0; i < this._rows; i++){\n            var row = [];\n            for(var j = 0; j < this._cols; j++){\n                row.push(0);\n            }\n            this.grid.push(row);\n        }\n    }\n\n    initialisesnake(){\n        var randX = Math.floor(Math.random()*this._cols);\n        var randY = Math.floor(Math.random()*this._rows);\n        this.snake.positions = [[randX,randY]];\n        this.snake.positions.push([randX,randY+1]);\n    }\n\n    updateGrid(){\n\n        // add snake\n        this.snake.positions.forEach((position)=>{\n            this.grid[position[0]][position[1]] = 1;\n        })\n\n        // add token\n        this.grid[this.token[0]][this.token[1]] = 2;\n\n        if(this.onUpdate)\n            this.onUpdate();\n\n    }\n\n    \n\n    updateSnake(){\n        var newsnakeHead = [0,0];\n        newsnakeHead[0] = this.snake.positions[0][0];\n        newsnakeHead[1] = this.snake.positions[0][1];\n\n        newsnakeHead[0] += this.snake.direction[0];\n        newsnakeHead[1] += this.snake.direction[1];\n\n        newsnakeHead[0] = newsnakeHead[0] < 0? this._cols- 1:newsnakeHead[0];\n        newsnakeHead[1] = newsnakeHead[1] < 0? this._rows - 1:newsnakeHead[1];\n\n        newsnakeHead[0] = newsnakeHead[0] % this._cols;\n        newsnakeHead[1] = newsnakeHead[1] % this._rows;\n\n        var oldsnakeTail = this.snake.positions.pop(); //remove the tail\n        this.grid[oldsnakeTail[0]][oldsnakeTail[1]] = 0;\n\n        this.snake.positions.unshift(newsnakeHead); //add a head\n    }\n\n    updateGame(){\n        //this.initialiseGrid();\n        this.updateSnake();\n        this.evaluateGrid();\n        this.updateGrid();\n    }\n\n    placeToken(){\n\n        let randY;\n        let randX;\n\n        do{\n            randX = Math.floor(Math.random() * this._cols);\n            randY = Math.floor(Math.random() * this._rows);\n        }\n        while(this.grid[randX][randY] == 1)\n        \n        this.token = [randX,randY];\n\n    }\n\n    evaluateGrid(){\n        var snakeHead = this.snake.positions[0];\n\n        if(snakeHead[0] == this.token[0] && snakeHead[1] == this.token[1]){\n            this.score++;\n            this.snake.positions.push(snakeHead);\n            this.placeToken();\n        }\n        else if(this.grid[snakeHead[0]][snakeHead[1]] == 1){\n            this.gameOver();\n        }\n    }\n\n    initialiseGame(){\n        this.score = 0;\n        this.gameState = this.STATE.INITIAL;\n        this.initialiseGrid();\n        this.initialisesnake();\n        this.placeToken();\n        this.updateGrid();\n    }\n\n    toggleGame(){\n    \n        switch(this.gameState){\n            case this.STATE.PLAYING:\n                this.pauseGame();\n                break;\n            case this.STATE.INITIAL:\n                this.startGame();\n                break;\n            case this.STATE.PAUSED:\n                this.startGame();\n                break;\n            case this.STATE.GAMEOVER:\n                this.initialiseGame();\n                break;\n        }\n    }\n\n    gameOver(){\n        clearInterval(this.timer);\n        this.gameState = this.STATE.GAMEOVER;\n        this.onUpdate();\n    }\n\n    pauseGame(){\n        clearInterval(this.timer);\n        this.gameState = this.STATE.PAUSED;\n        this.onUpdate();\n    }\n\n    startGame(){\n        if(this.gameState != this.STATE.PLAYING){\n            this.timer = setInterval(this.updateGame, this._gamespeed);\n            this.gameState = this.STATE.PLAYING;\n            this.onUpdate();\n        }\n    }\n\n    \n    \n\n      onKeyPressed(e) {\n    \n        switch(e.keyCode){\n            case 37: // left\n                this.moveLeft();\n                break;\n            case 38: // up \n                this.moveUp();\n                break;\n            case 39: // right\n                this.moveRight();\n                break;\n            case 40: // down\n                this.moveDown();\n                break;\n            case 13: //enter\n                this.toggleGame();\n                break;\n            default:\n                break;\n        }\n      }\n\n      moveLeft(){\n        if(this.snake.direction != this.direction.right)\n                    this.snake.direction = this.direction.left;\n      }\n\n      moveUp(){\n        if(this.snake.direction != this.direction.down)\n                    this.snake.direction = this.direction.up;\n      }\n\n      moveRight(){\n        if(this.snake.direction != this.direction.left)\n            this.snake.direction = this.direction.right;\n      }\n\n      moveDown(){\n        if(this.snake.direction != this.direction.up)\n            this.snake.direction = this.direction.down;\n      }\n\n\n   \n}\n","import React from \"react\"\nimport \"../css/scorecounter.css\"\n\nexport default class ScoreCounter extends React.Component{\n    constructor(props){\n        super(props);\n\n        this._previousScore = this.props.score;\n        this._counter = 0;\n    }\n\n    render(){\n        \n        if(this._previousScore != this.props.score)\n            {\n                this._counter++;\n                this._previousScore = this.props.score;\n            }\n            \n        \n        if(this._counter  % 2)\n            return(<div className=\"scorecounter pulsea\">\n                {this.props.score}\n                </div>);\n        else\n            return(<div className=\"scorecounter pulseb\">\n            {this.props.score}\n            </div>);\n    }\n}","import React from \"react\"\nimport '../css/token.css'\n\n\n\nexport default class Token extends React.Component{\n\n    render(){ \n            var position = this.props.gamelogic.token;\n            var y = (position[0] / this.props.gamelogic._rows * 100) + \"%\";\n            var x = (position[1] / this.props.gamelogic._cols *100) + \"%\";\n            var size = (1/this.props.gamelogic._rows * 100) + \"%\";\n\n        var placementStyle ={\n            position: 'absolute',\n            height: size,\n            width: size,\n            top: y,\n            left: x,\n        }\n        return(\n            <div className=\"tokencontainer\">\n               <div className=\"token\" style={placementStyle}></div>\n            </div>\n        )\n    }\n    \n}\n","import React from \"react\"\n\n\nexport default class SwipeGrid extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.detectSwipe = this.detectSwipe.bind(this);\n        this.startSwipe = this.startSwipe.bind(this);\n        this.onTap = this.onTap.bind(this);\n    }\n\n    currentFingerPosition = [];\n    lastFingerPosition = [];\n    isFingerDown = false;\n\n    onTap(){\n        console.log(\"tapped\");\n        let event = new Event(\"tapGrid\");\n        document.dispatchEvent(event);\n    }\n\n    startSwipe(e){\n        this.lastFingerPosition = [e.clientX, e.clientY];\n        this.isFingerDown = true;\n    }\n\n    detectSwipe(e){\n\n        if(this.isFingerDown){\n            this.currentFingerPosition = [e.clientX, e.clientY];\n\n            var difX = (this.currentFingerPosition[0] - this.lastFingerPosition[0]) / window.screen.width;\n            var difY = (this.currentFingerPosition[1] - this.lastFingerPosition[1]) / window.screen.width;\n            \n\n            if(difX > 0.05){\n                this.isFingerDown = false;\n                let event = new Event(\"swipeRight\");\n                document.dispatchEvent(event);\n            }\n            else if(difX < -0.05){\n                let event = new Event(\"swipeLeft\");\n                document.dispatchEvent(event);\n                this.isFingerDown = false;\n            }\n            else if(difY > 0.05){\n                let event = new Event(\"swipeDown\");\n                document.dispatchEvent(event);\n                this.isFingerDown = false;\n            }\n            else if(difY < -0.05){\n                let event = new Event(\"swipeUp\");\n                document.dispatchEvent(event);\n                this.isFingerDown = false;\n            }\n        }\n    }\n\n\n    render(){\n        let style = {\n            position: 'absolute',\n            height: '100%',\n            width: '100%'\n        }\n        return(<div style={style} onMouseDown={this.startSwipe} onMouseMove={this.detectSwipe} onClick={this.onTap}></div>)\n    }\n    \n}\n","import React from \"react\"\nimport \"../css/pausebutton.css\"\n\nexport default class PauseButton extends React.Component{\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(<div className=\"pausebutton\" onClick={this.props.onclick}>||</div>);\n    }\n}","import React from \"react\"\nimport GridSquare from \"./gridsquare\"\nimport MessageBox from \"./messagebox\";\nimport Snake from \"./snake\";\nimport GameLogic from \"./gamelogic\";\nimport ScoreCounter from \"./scorecounter\";\nimport Token from \"./token\";\nimport SwipeGrid from \"./swipegrid\";\nimport PauseButton from \"./pausebutton\";\nimport '../css/grid.css'\nimport Logo from \"../logo.svg\";\n\nexport default class Game extends React.Component{\n    state = {\n        gamelogic: new GameLogic(this.props.rows,this.props.cols)\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state.gamelogic.onUpdate = this.updateReactState.bind(this);\n      }\n\n    updateReactState(){\n        this.setState({gamelogic: this.state.gamelogic});\n    }\n\n\n    renderGrid(){\n        var gridSquares = [];\n        var num = this.state.gamelogic.grid.length * this.state.gamelogic.grid[0].length;\n\n        for(let i = 0, index = 0; i < this.state.gamelogic.grid.length; i++){\n            for(var j = 0; j < this.state.gamelogic.grid[i].length; j++, index++){\n                var val = this.state.gamelogic.grid[i][j];\n\n                    gridSquares.push(<GridSquare key={index} index={index}/>);\n                \n                \n            }\n        }\n\n        return gridSquares;\n    }\n\n    render(){\n\n        var gameSize = {\n            'width':this.props.width,\n            'height':this.props.height\n        }\n\n        var gridSize = {\n            'gridTemplateColumns':'repeat('+this.props.cols+', 1fr)',\n            'gridTemplateRows':'repeat('+this.props.rows+', 1fr)'\n        }\n\n        return(\n            <div>\n                <div id=\"gameContainer\" style={gameSize}>\n                    <div id=\"hud\">\n                        <div id=\"hud-left\">\n                            <img src={Logo} style={{width:'30%'}}/><b>React Snake</b>\n                            \n                        </div>\n                        <div id=\"hud-middle\">\n                            <ScoreCounter score={this.state.gamelogic.score}/>\n                        </div>\n                        <div id=\"hud-right\">\n                         <PauseButton onclick={this.state.gamelogic.toggleGame.bind(this.state.gamelogic)}/>\n                         </div>\n                    </div>\n                    <div id=\"topWall\">\n                        <div className=\"wallEnd\"></div>\n                        <div className=\"wallSideTop\"></div>\n                    </div>\n                    <div id=\"leftWall\"></div>\n                    <div id=\"center\">\n                    \n                        <div className=\"grid\" style={gridSize}>\n                            {this.renderGrid()}\n                            <Snake gamelogic={this.state.gamelogic}/>\n                            <Token gamelogic={this.state.gamelogic}/>\n                            <MessageBox gamelogic={this.state.gamelogic}/>\n                            <SwipeGrid/>\n                        </div>\n                    </div>\n                    <div id=\"rightWall\"></div>\n                    <div id=\"bottomWall\">\n                        <div className=\"wallSideBottom\"></div>\n                        <div className=\"wallEnd\"></div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\"\nimport Game from \"./components/game\"\n\nexport default class App extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n      }\n\n    render(){\n        return(\n            <div>\n                \n                <Game rows=\"19\" cols=\"19\" height=\"400px\" width=\"400px\"/>\n                \n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}